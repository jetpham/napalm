// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Game {
    id          String   @id @default(cuid())
    title       String
    description String?
    createdAt   DateTime @default(now())
    endingTime  DateTime
    
    // Privacy control - simple public/private
    isPublic    Boolean  @default(true)
    
    admin     User        @relation(fields: [adminId], references: [id])
    adminId   String
    challenges Challenge[]
    
    // Game participants and invites
    participants GameParticipant[]
    userInvites  UserInvite[]
    inviteLinks  InviteLink[]
    

    @@index([title])
}

model Challenge {
    id          String   @id @default(cuid())
    title       String
    description String?
    flag        String
    pointValue  Int
    createdAt   DateTime @default(now())

    game     Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId   String
    submissions Submission[]

    @@index([title])
}

model Submission {
    id          String   @id @default(cuid())
    flag        String
    createdAt   DateTime @default(now())

    user     User      @relation(fields: [userId], references: [id])
    userId   String
    challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
    challengeId String
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    username      String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    games         Game[]
    submissions   Submission[]
    
    // Game participation and invites
    gameParticipants GameParticipant[]
    acceptedUserInvites UserInvite[] @relation("AcceptedUserInvites")
    invitedByUserInvites UserInvite[] @relation("InvitedBy")
    invitedUserInvites UserInvite[] @relation("InvitedUser")
    inviteLinks      InviteLink[]
    usedInviteLinks  InviteLink[] @relation("UsedInviteLinks")
    
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Game participation tracking
model GameParticipant {
    id        String   @id @default(cuid())
    joinedAt  DateTime @default(now())
    
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId String
    
    @@unique([userId, gameId])
    @@index([gameId])
}

// User invitations (by user reference)
model UserInvite {
    id        String   @id @default(cuid())
    message   String?
    status    InviteStatus @default(PENDING)
    createdAt DateTime @default(now())
    expiresAt DateTime? // Optional expiration
    
    invitedBy User @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)
    invitedById String
    invitedUser User @relation("InvitedUser", fields: [invitedUserId], references: [id], onDelete: Cascade)
    invitedUserId String
    game      Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId    String
    
    // If user accepts invite, link to their user account
    acceptedBy   User?   @relation("AcceptedUserInvites", fields: [acceptedById], references: [id])
    acceptedById String?
    acceptedAt   DateTime?
    
    @@unique([invitedUserId, gameId]) // Prevent duplicate invites to same user for same game
    @@index([gameId])
    @@index([status])
}

// Invite links
model InviteLink {
    id        String   @id @default(cuid())
    inviteCode String  @unique // unique code for invite links
    message   String?
    status    InviteStatus @default(PENDING)
    createdAt DateTime @default(now())
    expiresAt DateTime? // Optional expiration
    isUsed    Boolean? // Optional usage tracking - null means no limit, false means unused, true means used
    
    invitedBy User @relation(fields: [invitedById], references: [id], onDelete: Cascade)
    invitedById String
    game      Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId    String
    
    // Track who used the invite link (for single-use links)
    usedBy   User?   @relation("UsedInviteLinks", fields: [usedById], references: [id])
    usedById String?
    usedAt   DateTime?
    
    @@index([gameId])
    @@index([status])
    @@index([inviteCode])
}

enum InviteStatus {
    PENDING
    ACCEPTED
    DECLINED
    EXPIRED
    DELETED
    USED
}

